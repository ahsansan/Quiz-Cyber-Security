<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOLH
        FQDiwxwA4sIdCOHGGCXgyxIl4NANCeDLEgDh3gMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOK0
        LADksjAA5bAxDOS2K1HjvCOv4sMc6OHIFengzRCy39ELVN/VBw3f0wkA3tsBAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADnoUMA6JpKAualPjrlqzey5LIw+OO4KfbiviHD4cQaweHJFPXgzg7539MJtt/XBT7d3QAC3toCAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA6ZVRAOmSVAjomktu56BE6OamPfnlrTay5LIvZeS2KnDjuyRy4cQaZOHLE6/gzw7439QI6t7Y
        BHPe2wAK3toBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAOqKXgDriGAL6Y9YiemUUfnomkrf56FDcualPnHlqzfM5LIw++O3KfzjvCPP4sEec+DL
        Em/g0A3c39QI+t7YA47e2wAN3toBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADsfmsA7XpvBuuDZYXqiV/86o9Yy+mVUVzomkum56BE+OamPf/lrDb/5LIw/+O4
        Kf/ivSL54sEequHJFFvg0A3H39QI/N7YA4ve2wAI3toCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA7nN4AOqNWwDteHJj7H1s9+uDZc7qiV9Z6Y9YwumVUf/omkr/56BE/+am
        Pf/lrDb/5LIw/+O3Kf/ivSL/4sIdxuHJFVng0A3J39QI+d7YBGnlyRUA3tkDAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAO9rgADubn4A721/Le5yed7td3Pm7H1sXuuDZb7qiV//6o9Y/+mU
        Uf/omkv/56BE/+amPf/lrDb/5LIw/+O3Kf/ivSL/4sIdw+HKFFzgzw3i39QI4t/WBjLf1gYA39gDAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8GKMAPFckgXvZ4ac72yA/+5xen3teHKZ7H1s/+uD
        Zf/qiV/w6ZBX0OmVUMvom0nL56FDy+anPMvlrTXP5LIv7+O3Kf/ivSL/4sEen+DLEnjgzw7939MJot/W
        Bgbf1AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADxXZEA8VySOfBgje/wZYfE72x/Zu5y
        efPtd3P/7H1s3uuEZWbriGBr6o1ZcumTU3LomUxy559FcuakP2zlrTVk5LIv2uO3Kf/ivSL14sEeaeHK
        E7/gzg/y4NEMP+DRDADg1QYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA81CfAP8A/wDyVpqQ8VqU//Ff
        j3LvZ4a372yA/+5yef/tdnSI7H5rmuuDZf7qiV7+6Y9Y+umVUfnomkr+56BE/uakP6DlrjSC5LIw/+O4
        Kf/jvCS84cUabuHJFf3gzRCW4NMIAeDNEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD0S6UA9EumGvNP
        odfyVJvY8VuTZPBgjfPwZof/72yA/+5we3bteHHG7H1s/+uDZf/qiF+26ZBWsemUUf/omkr/559Fy+an
        O3HlrDb+5LIw/+O3KfXjvCRn4sQa0+HIFtzhyhMd4coTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPRG
        rAD0Ra1K9Emo+/NOo5zyVpmT8VqU//Fgjf/wZof/72qCde5zeMbtd3P/7H1s/euCZ33qi1x36Y9Y/OmV
        Uf/omUvM56JCceamPf7lrDb/5LIv/+S2K5nivyCW4sMc/eHGGFDhxhkAAAAAAAAAAAAAAAAAAAAAAAAA
        AAD2OroA9UKvAPY/tH/1Q6//9EiqcfNPocfyVJv/8VqU//Bgjf/wZYh1721/xu5yef/td3PI7H5rVeyB
        Z1bqil3D6Y9Y/+mUUsznnElx56BE/uamPf/lrDb/5LExzeO5J27iviL+4sEehuLAIADiwR4AAAAAAAAA
        AAAAAAAAAAAAAPc1vwD4MMQD9ji7rfY9tvD1Q69k9Emo6fNPof/yVJv/8VqU//Ffj3XwZ4bG72yA/+5x
        etjtd3Na7H1sWeuDZdTqiV7/6o5ZzOiWUHHomkr+56BE/+amPf/lqzft5LIwZOO4KOzjvCSz4sAfBeK9
        IgAAAAAAAAAAAAAAAAAAAAAA+C/GAPguxw/3MsLN9ze92fU+tGv1Q6/59Emo//NPof/yVZv/8liWgfBi
        i6nwZof/72yA/+5xeuTtd3Pi7H1s/+uDZf/riF+v6ZBWfOmUUf/omkr/56BE/+amPfvlqzhu5LMv1OO3
        KtLjuScS47koAAAAAAAAAAAAAAAAAAAAAAD5KcwA+SnNHPgsyeH4McTD9jm7efY9tv/1Q6//9Emo//NP
        of/yVJzR8VqUVfBii3jvaIWG7m5+h+5zd4fteXGG7H9qeuuDZVPqiV7N6Y9Y/+mVUf/omkr/56BE/+ak
        P37lrTW95LEw5eS0LSHktC4AAAAAAAAAAAAAAAAAAAAAAPoj0wD6I9Qn+SbQ7Pkqy7P3M8GG9ze8//Y9
        tv/1Q6//9Emo//NPof/yU52F8VqUefFfj7bwZYiz72uBs+5xe7XtdXZ97H9qf+uDZf/qiV//6Y9Y/+mV
        Uf/omkr/559GjOanO63lqzfw5a4zLOWuNAAAAAAAAAAAAAAAAAAAAAAA+h7aAPsd2i76INfx+iTSq/gt
        yI74McP/9ze8//Y9tv/1Q6//9Emo//NNo47yVpmp8VqU//Bgjf/wZof/72yA/+5we6/teXGI7H1s/+uD
        Zf/qiV//6Y9Y/+mVUf/omUyU56JCpeamPfTmqToz5qg6AAAAAAAAAAAAAAAAAAAAAAD7GOAA+xjhL/sb
        3fH6H9mq+SjOj/gsyv/4MsP/9ze8//Y9tv/1Q6//9Eeqr/NRn3vyVJv+8VqU//Fgjf/wZof/72uBgO5z
        eKntd3P/7H1s/+uDZf/qiV//6Y9Y/+mTU5TonEmk56BE9eajQDTmo0EAAAAAAAAAAAAAAAAAAAAAAPwS
        5wD8Eucq/BXk7vsZ37D6ItWI+SbR//gsyv/4MsP/9ze8//Y9tf/1Q6/w9EeqafNRn5byVZrl8VuU5vFh
        jZvwZoZm72yA7e5yef/td3P/7H1s/+uDZf/qiV7/6o1ajuiWUKromkvx551HL+edRwAAAAAAAAAAAAAA
        AAAAAAAA/Q3tAP0M7iD9D+rl/BPmvvsc3Hz6INf/+SbQ//gsyv/4MsP/9ze8//Y9tf/1QrDl9EeqhPNO
        omPyVJti8lmVgfFgjeLwZof/72yA/+5yef/td3P/7H1s/+uDZf/rh2CB6ZBWuOmUUunol04k6JdOAAAA
        AAAAAAAAAAAAAAAAAAD+B/MA/gf0E/4K8dP9DuzX/BbjVfsc3MH6INf2+SbQ//gsyv/4MsP/9ze8//Y9
        tf/1Q6/99Eio8PNOovDyVZv98VqU//Bgjf/wZof/72yA/+5yef/teHL37H5rxeuDZVbqil7S6o5Z2OmS
        VBbpkVUAAAAAAAAAAAAAAAAAAAAAAP4E+AD+AfoE/gX3pf4J8v79De24/BPmbfsc3Gf6ItWm+SbQ5/gs
        yv/4McP/9ze8//Y9tv/1Q6//9Emo//NPof/yVJv/8VqU//Fgjf/wZofp721/qe5zeGntdnRr7H1ttOuD
        Zf3riF+r6ZBXBuqMWwAAAAAAAAAAAAAAAAAAAAAA/wD9AP8C+QD/Avou/gT3tf4J8fb9Duv8/BPmz/sY
        4IT6INdg+SjOifgtydH4MsP69ze8//Y9tv/1Q6//9Emo//NPofvyVZrU8VyTi/BgjWDwZYiB72uBzO5x
        efvteHL37H5rueuDZTLrgWgA64ZiAAAAAAAAAAAAAAAAAAAAAAAAAAAA/wD/AP4F9gD+AvoL/gb1Q/0L
        8Jr9D+rl/BXk//sa3+f6Htmh+iXSZfguyHD3M8G29zi88PY9tfL1RK659EqncvNOomTyU5ye8VqU5fFg
        jf/wZobn721/nu5zd0bteXAN7nZ0AOx4cgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAD9CvEA/gf0A/0N7Sj8Eeh3/BXjzPsb3vv6INf3+SXSwPkqzHf3MsJh9zi8YfY8t3X1QrC99Emo9fNP
        ofzyVZrP8VyTevBiiyrvZ4UE72aHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/A7tAP0A/wD8E+YT+xfhVPsc3K36Idbv+SbQ/vkry934McTb9ze8/fY9
        tfH1RK6w9EqmV/NQnxXwX44A8lKdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPsR6QD7HNwA+xnfB/oe2jb6ItWK+SfP1Pgs
        ydX3M8KO9jm6OPU/tAj2PbUA+Dq6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+iDXAPsf
        2QL5JNIU+SjOFfgsygL4K8sAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////8P///8A///8AD//+AAf//AAD//gAAf/4AAH/8AAA/+AAAH/gA
        AB/4AAAP8AAAD/AAAA/wAAAP4AAAB+AAAAfgAAAH4AAAB+AAAAfgAAAH4AAAB+AAAAfgAAAH4AAAB/AA
        AA/4AAAf/gAAf//AA///8A////w///////8=
</value>
  </data>
</root>